{"version":3,"file":"opendistroQueryWorkbenchKibana.chunk.0.js","sources":["/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/ace-themes/sql_console.js","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/application.tsx","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/components/Main/index.ts","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/components/Main/main.tsx","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/components/PPLPage/PPLPage.tsx","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/components/QueryLanguageSwitch/Switch.tsx","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/components/QueryResults/QueryResults.tsx","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/components/QueryResults/QueryResultsBody.tsx","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/components/SQLPage/SQLPage.tsx","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/components/app.tsx","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/utils/PanelWrapper.tsx","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/utils/constants.ts","/plugin:opendistroQueryWorkbenchKibana/plugins/workbench/public/utils/utils.ts"],"sourcesContent":["/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport * as ace from 'brace';\nace.define('ace/theme/sql_console', ['require', 'exports', 'module', 'ace/lib/dom'], function (acequire, exports, module) {\n  exports.isDark = false;\n  exports.cssClass = 'ace-sql-console';\n  exports.cssText = require('../index.scss');\n  const dom = acequire('../lib/dom');\n  dom.importCssString(exports.cssText, exports.cssClass);\n});","/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { WorkbenchApp } from './components/app';\nexport const renderApp = ({\n  notifications,\n  http\n}, {\n  navigation\n}, {\n  appBasePath,\n  element\n}) => {\n  ReactDOM.render( /*#__PURE__*/React.createElement(WorkbenchApp, {\n    basename: appBasePath,\n    notifications: notifications,\n    http: http,\n    navigation: navigation\n  }), element);\n  return () => ReactDOM.unmountComponentAtNode(element);\n};","/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nexport { Main } from './main';","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport React from 'react';\nimport { EuiSpacer, EuiFlexGroup, EuiFlexItem, EuiButton, EuiTitle } from '@elastic/eui';\nimport _ from 'lodash';\nimport QueryResults from '../QueryResults/QueryResults';\nimport Switch from '../QueryLanguageSwitch/Switch';\nimport { SQLPage } from '../SQLPage/SQLPage';\nimport { PPLPage } from '../PPLPage/PPLPage';\nimport { getDefaultTabId, getDefaultTabLabel, getQueries, getSelectedResults } from '../../utils/utils';\nimport { MESSAGE_TAB_LABEL } from '../../utils/constants';\nconst SUCCESS_MESSAGE = 'Success';\n\nconst errorQueryResponse = queryResultResponseDetail => {\n  let errorMessage = queryResultResponseDetail.errorMessage + ', this query is not runnable. \\n \\n' + queryResultResponseDetail.data;\n  return errorMessage;\n};\n\nexport function getQueryResultsForTable(queryResults) {\n  return queryResults.map(queryResultResponseDetail => {\n    if (!queryResultResponseDetail.fulfilled) {\n      return {\n        fulfilled: queryResultResponseDetail.fulfilled,\n        errorMessage: errorQueryResponse(queryResultResponseDetail)\n      };\n    } else {\n      // let resultTable: Table;\n      const responseObj = queryResultResponseDetail.data ? JSON.parse(queryResultResponseDetail.data) : '';\n      let fields = [];\n      let dataRows = [];\n\n      const schema = _.get(responseObj, 'schema');\n\n      const datarows = _.get(responseObj, 'datarows');\n\n      let queryType = 'default';\n\n      for (const column of schema.values()) {\n        if (_.isEqual(_.get(column, 'name'), 'TABLE_NAME')) {\n          queryType = 'show';\n\n          for (const col of schema.values()) {\n            if (_.isEqual(_.get(col, 'name'), 'DATA_TYPE')) queryType = 'describe';\n          }\n        }\n      }\n\n      switch (queryType) {\n        case 'show':\n          fields[0] = 'TABLE_NAME';\n          let index = -1;\n\n          for (const [id, field] of schema.entries()) {\n            if (_.eq(_.get(field, 'name'), 'TABLE_NAME')) {\n              index = id;\n              break;\n            }\n          }\n\n          for (const [id, field] of datarows.entries()) {\n            let row = {};\n            row['TABLE_NAME'] = field[index];\n            let dataRow = {\n              rowId: id,\n              data: row\n            };\n            dataRows[id] = dataRow;\n          }\n\n          break;\n\n        case 'describe':\n        case 'default':\n          for (const [id, field] of schema.entries()) {\n            let alias = null;\n\n            try {\n              alias = _.get(field, 'alias');\n            } catch (e) {\n              console.log('No alias for field ' + field);\n            } finally {\n              fields[id] = !alias ? _.get(field, 'name') : alias;\n            }\n          }\n\n          for (const [id, data] of datarows.entries()) {\n            let row = {};\n\n            for (const index of schema.keys()) {\n              const fieldname = fields[index];\n              row[fieldname] = data[index];\n            }\n\n            let dataRow = {\n              rowId: id,\n              data: row\n            };\n            dataRows[id] = dataRow;\n          }\n\n          break;\n\n        default:\n      }\n\n      return {\n        fulfilled: queryResultResponseDetail.fulfilled,\n        data: {\n          fields: fields,\n          records: dataRows,\n          message: SUCCESS_MESSAGE\n        }\n      };\n    }\n  });\n}\nexport class Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"httpClient\", void 0);\n\n    _defineProperty(this, \"onSelectedTabIdChange\", tab => {\n      this.setState({\n        selectedTabId: tab.id,\n        selectedTabName: tab.name,\n        searchQuery: '',\n        itemIdToExpandedRowMap: {}\n      });\n    });\n\n    _defineProperty(this, \"onQueryChange\", ({\n      query\n    }) => {\n      // Reset pagination state.\n      this.setState({\n        searchQuery: query,\n        itemIdToExpandedRowMap: {}\n      });\n    });\n\n    _defineProperty(this, \"updateExpandedMap\", map => {\n      this.setState({\n        itemIdToExpandedRowMap: map\n      });\n    });\n\n    _defineProperty(this, \"onRun\", queriesString => {\n      const queries = getQueries(queriesString);\n      const language = this.state.language;\n\n      if (queries.length > 0) {\n        let endpoint = '../api/sql_console/' + (_.isEqual(language, 'SQL') ? 'sqlquery' : 'pplquery');\n        const responsePromise = Promise.all(queries.map(query => this.httpClient.post(endpoint, {\n          query\n        }).catch(error => {\n          this.setState({\n            messages: [{\n              text: error.message,\n              className: 'error-message'\n            }]\n          });\n        })));\n        Promise.all([responsePromise]).then(([response]) => {\n          const results = response.map(response => this.processQueryResponse(response));\n          const resultTable = getQueryResultsForTable(results);\n          this.setState({\n            queries: queries,\n            queryResults: results,\n            queryResultsTable: resultTable,\n            selectedTabId: getDefaultTabId(results),\n            selectedTabName: getDefaultTabLabel(results, queries[0]),\n            messages: this.getMessage(resultTable),\n            itemIdToExpandedRowMap: {},\n            queryResultsJSON: [],\n            queryResultsCSV: [],\n            queryResultsTEXT: [],\n            searchQuery: ''\n          }, () => console.log('Successfully updated the states')); // added callback function to handle async issues\n        });\n      }\n    });\n\n    _defineProperty(this, \"onTranslate\", queriesString => {\n      const queries = getQueries(queriesString);\n      const language = this.state.language;\n\n      if (queries.length > 0) {\n        let endpoint = '../api/sql_console/' + (_.isEqual(language, 'SQL') ? 'translatesql' : 'translateppl');\n        const translationPromise = Promise.all(queries.map(query => this.httpClient.post(endpoint, {\n          query\n        }).catch(error => {\n          this.setState({\n            messages: [{\n              text: error.message,\n              className: 'error-message'\n            }]\n          });\n        })));\n        Promise.all([translationPromise]).then(([translationResponse]) => {\n          const translationResult = translationResponse.map(translationResponse => this.processTranslateResponse(translationResponse));\n          const shouldCleanResults = queries == this.state.queries;\n\n          if (shouldCleanResults) {\n            this.setState({\n              queries,\n              queryTranslations: translationResult,\n              messages: this.getTranslateMessage(translationResult)\n            });\n          } else {\n            this.setState({\n              queries,\n              queryTranslations: translationResult,\n              messages: this.getTranslateMessage(translationResult)\n            }, () => console.log('Successfully updated the states'));\n          }\n        });\n      }\n    });\n\n    _defineProperty(this, \"getJson\", queries => {\n      if (queries.length > 0) {\n        Promise.all(queries.map(query => this.httpClient.post('../api/sql_console/queryjson', {\n          query\n        }).catch(error => {\n          this.setState({\n            messages: [{\n              text: error.message,\n              className: 'error-message'\n            }]\n          });\n        }))).then(response => {\n          const results = response.map(response => this.processQueryResponse(response));\n          this.setState({\n            queries,\n            queryResultsJSON: results\n          }, () => console.log('Successfully updated the states'));\n        });\n      }\n    });\n\n    _defineProperty(this, \"getJdbc\", queries => {\n      const language = this.state.language;\n\n      if (queries.length > 0) {\n        let endpoint = '../api/sql_console/' + (_.isEqual(language, 'SQL') ? 'sqlquery' : 'pplquery');\n        Promise.all(queries.map(query => this.httpClient.post(endpoint, {\n          query\n        }).catch(error => {\n          this.setState({\n            messages: [{\n              text: error.message,\n              className: 'error-message'\n            }]\n          });\n        }))).then(jdbcResponse => {\n          const jdbcResult = jdbcResponse.map(jdbcResponse => this.processQueryResponse(jdbcResponse));\n          this.setState({\n            queries,\n            queryResults: jdbcResult\n          }, () => console.log('Successfully updated the states'));\n        });\n      }\n    });\n\n    _defineProperty(this, \"getCsv\", queries => {\n      const language = this.state.language;\n\n      if (queries.length > 0) {\n        let endpoint = '../api/sql_console/' + (_.isEqual(language, 'SQL') ? 'sqlcsv' : 'pplcsv');\n        Promise.all(queries.map(query => this.httpClient.post(endpoint, {\n          query\n        }).catch(error => {\n          this.setState({\n            messages: [{\n              text: error.message,\n              className: 'error-message'\n            }]\n          });\n        }))).then(csvResponse => {\n          const csvResult = csvResponse.map(csvResponse => this.processQueryResponse(csvResponse));\n          this.setState({\n            queries,\n            queryResultsCSV: csvResult\n          }, () => console.log('Successfully updated the states'));\n        });\n      }\n    });\n\n    _defineProperty(this, \"getText\", queries => {\n      const language = this.state.language;\n\n      if (queries.length > 0) {\n        let endpoint = '../api/sql_console/' + (_.isEqual(language, 'SQL') ? 'sqltext' : 'ppltext');\n        Promise.all(queries.map(query => this.httpClient.post(endpoint, {\n          query\n        }).catch(error => {\n          this.setState({\n            messages: [{\n              text: error.message,\n              className: 'error-message'\n            }]\n          });\n        }))).then(textResponse => {\n          const textResult = textResponse.map(textResponse => this.processQueryResponse(textResponse));\n          this.setState({\n            queries,\n            queryResultsTEXT: textResult\n          }, () => console.log('Successfully updated the states'));\n        });\n      }\n    });\n\n    _defineProperty(this, \"onClear\", () => {\n      this.setState({\n        queries: [],\n        queryTranslations: [],\n        queryResultsTable: [],\n        queryResults: [],\n        queryResultsCSV: [],\n        queryResultsJSON: [],\n        queryResultsTEXT: [],\n        messages: [],\n        selectedTabId: MESSAGE_TAB_LABEL,\n        selectedTabName: MESSAGE_TAB_LABEL,\n        itemIdToExpandedRowMap: {}\n      });\n    });\n\n    _defineProperty(this, \"onChange\", id => {\n      this.setState({\n        language: id,\n        queryResultsTable: []\n      }, () => console.log('Successfully updated language to ', this.state.language)); // added callback function to handle async issues\n    });\n\n    this.onChange = this.onChange.bind(this);\n    this.state = {\n      language: 'SQL',\n      sqlQueriesString: 'SHOW tables LIKE %;',\n      pplQueriesString: '',\n      queries: [],\n      queryTranslations: [],\n      queryResultsTable: [],\n      queryResults: [],\n      queryResultsJSON: [],\n      queryResultsCSV: [],\n      queryResultsTEXT: [],\n      selectedTabName: MESSAGE_TAB_LABEL,\n      selectedTabId: MESSAGE_TAB_LABEL,\n      searchQuery: '',\n      itemIdToExpandedRowMap: {},\n      messages: [],\n      isResultFullScreen: false\n    };\n    this.httpClient = this.props.httpClient;\n    this.updateSQLQueries = _.debounce(this.updateSQLQueries, 250).bind(this);\n    this.updatePPLQueries = _.debounce(this.updatePPLQueries, 250).bind(this);\n    this.setIsResultFullScreen = this.setIsResultFullScreen.bind(this);\n  }\n\n  processTranslateResponse(response) {\n    if (!response) {\n      return {\n        fulfilled: false,\n        errorMessage: 'no response',\n        data: undefined\n      };\n    }\n\n    if (!response.data.ok) {\n      return {\n        fulfilled: false,\n        errorMessage: response.data.resp,\n        data: undefined\n      };\n    }\n\n    return {\n      fulfilled: true,\n      data: response.data.resp\n    };\n  }\n\n  formatQueryErrorBody(data) {\n    let prettyErrorMessage = \"\";\n    prettyErrorMessage += 'reason: ' + data.errorReason + '\\n';\n    prettyErrorMessage += 'details: ' + data.errorDetails + '\\n';\n    prettyErrorMessage += 'type: ' + data.errorType + '\\n';\n    prettyErrorMessage += 'status: ' + data.status;\n    return prettyErrorMessage;\n  }\n\n  processQueryResponse(response) {\n    if (!response) {\n      return {\n        fulfilled: false,\n        errorMessage: 'no response',\n        data: ''\n      };\n    }\n\n    if (!response.data.ok) {\n      return {\n        fulfilled: false,\n        errorMessage: response.data.resp,\n        data: this.formatQueryErrorBody(response.data)\n      };\n    }\n\n    return {\n      fulfilled: true,\n      data: response.data.resp\n    };\n  }\n\n  // It returns the error or successful message to display in the Message Tab\n  getMessage(queryResultsForTable) {\n    return queryResultsForTable.map(queryResult => {\n      return {\n        text: queryResult.fulfilled && queryResult.data ? queryResult.data.message : queryResult.errorMessage,\n        className: queryResult.fulfilled ? 'successful-message' : 'error-message'\n      };\n    });\n  }\n\n  getTranslateMessage(translationResult) {\n    return translationResult.map(translation => {\n      return {\n        text: translation.data ? SUCCESS_MESSAGE : translation.errorMessage,\n        className: translation.fulfilled ? 'successful-message' : 'error-message'\n      };\n    });\n  }\n\n  updateSQLQueries(query) {\n    this.setState({\n      sqlQueriesString: query\n    });\n  }\n\n  updatePPLQueries(query) {\n    this.setState({\n      pplQueriesString: query\n    });\n  }\n\n  setIsResultFullScreen(isFullScreen) {\n    this.setState({\n      isResultFullScreen: isFullScreen\n    });\n  }\n\n  render() {\n    let page;\n    let link;\n    let linkTitle;\n\n    if (this.state.language == 'SQL') {\n      page = /*#__PURE__*/React.createElement(SQLPage, {\n        onRun: this.onRun,\n        onTranslate: this.onTranslate,\n        onClear: this.onClear,\n        sqlQuery: this.state.sqlQueriesString,\n        sqlTranslations: this.state.queryTranslations,\n        updateSQLQueries: this.updateSQLQueries\n      });\n      link = 'https://opendistro.github.io/for-elasticsearch-docs/docs/sql/';\n      linkTitle = 'SQL documentation';\n    } else {\n      page = /*#__PURE__*/React.createElement(PPLPage, {\n        onRun: this.onRun,\n        onTranslate: this.onTranslate,\n        onClear: this.onClear,\n        pplQuery: this.state.pplQueriesString,\n        pplTranslations: this.state.queryTranslations,\n        updatePPLQueries: this.updatePPLQueries\n      });\n      link = 'https://opendistro.github.io/for-elasticsearch-docs/docs/ppl/';\n      linkTitle = 'PPL documentation';\n    }\n\n    if (this.state.isResultFullScreen) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sql-console-query-result\"\n      }, /*#__PURE__*/React.createElement(QueryResults, {\n        language: this.state.language,\n        queries: this.state.queries,\n        queryResults: this.state.queryResultsTable,\n        queryResultsJDBC: getSelectedResults(this.state.queryResults, this.state.selectedTabId),\n        queryResultsJSON: getSelectedResults(this.state.queryResultsJSON, this.state.selectedTabId),\n        queryResultsCSV: getSelectedResults(this.state.queryResultsCSV, this.state.selectedTabId),\n        queryResultsTEXT: getSelectedResults(this.state.queryResultsTEXT, this.state.selectedTabId),\n        messages: this.state.messages,\n        selectedTabId: this.state.selectedTabId,\n        selectedTabName: this.state.selectedTabName,\n        onSelectedTabIdChange: this.onSelectedTabIdChange,\n        itemIdToExpandedRowMap: this.state.itemIdToExpandedRowMap,\n        onQueryChange: this.onQueryChange,\n        updateExpandedMap: this.updateExpandedMap,\n        searchQuery: this.state.searchQuery,\n        tabsOverflow: false,\n        getJson: this.getJson,\n        getJdbc: this.getJdbc,\n        getCsv: this.getCsv,\n        getText: this.getText,\n        isResultFullScreen: this.state.isResultFullScreen,\n        setIsResultFullScreen: this.setIsResultFullScreen\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sql-console-query-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"query-language-switch\"\n    }, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      alignItems: \"center\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, null, /*#__PURE__*/React.createElement(EuiTitle, {\n      size: \"l\"\n    }, /*#__PURE__*/React.createElement(\"h1\", null, \"Query Workbench\"))), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(Switch, {\n      onChange: this.onChange,\n      language: this.state.language\n    })), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      href: link,\n      target: \"_blank\",\n      iconType: \"popout\",\n      iconSide: \"right\"\n    }, linkTitle)))), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"l\"\n    }), /*#__PURE__*/React.createElement(\"div\", null, page), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"l\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sql-console-query-result\"\n    }, /*#__PURE__*/React.createElement(QueryResults, {\n      language: this.state.language,\n      queries: this.state.queries,\n      queryResults: this.state.queryResultsTable,\n      queryResultsJDBC: getSelectedResults(this.state.queryResults, this.state.selectedTabId),\n      queryResultsJSON: getSelectedResults(this.state.queryResultsJSON, this.state.selectedTabId),\n      queryResultsCSV: getSelectedResults(this.state.queryResultsCSV, this.state.selectedTabId),\n      queryResultsTEXT: getSelectedResults(this.state.queryResultsTEXT, this.state.selectedTabId),\n      messages: this.state.messages,\n      selectedTabId: this.state.selectedTabId,\n      selectedTabName: this.state.selectedTabName,\n      onSelectedTabIdChange: this.onSelectedTabIdChange,\n      itemIdToExpandedRowMap: this.state.itemIdToExpandedRowMap,\n      onQueryChange: this.onQueryChange,\n      updateExpandedMap: this.updateExpandedMap,\n      searchQuery: this.state.searchQuery,\n      tabsOverflow: false,\n      getJson: this.getJson,\n      getJdbc: this.getJdbc,\n      getCsv: this.getCsv,\n      getText: this.getText,\n      isResultFullScreen: this.state.isResultFullScreen,\n      setIsResultFullScreen: this.setIsResultFullScreen\n    }))));\n  }\n\n}\nexport default Main;","/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport React from \"react\";\nimport { EuiPanel, EuiButton, EuiFlexGroup, EuiFlexItem, EuiText, EuiCodeEditor, EuiSpacer, EuiCodeBlock, EuiModal, EuiModalBody, EuiModalFooter, EuiModalHeader, EuiModalHeaderTitle, EuiOverlayMask } from \"@elastic/eui\";\nexport class PPLPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pplQuery: this.props.pplQuery,\n      translation: \"\",\n      isModalVisible: false\n    };\n  }\n\n  setIsModalVisible(visible) {\n    this.setState({\n      isModalVisible: visible\n    });\n  }\n\n  render() {\n    const closeModal = () => this.setIsModalVisible(false);\n\n    const showModal = () => this.setIsModalVisible(true);\n\n    const pplTranslationsNotEmpty = () => {\n      if (this.props.pplTranslations.length > 0) {\n        return this.props.pplTranslations[0].fulfilled;\n      }\n\n      return false;\n    };\n\n    const showExplainErrorMessage = () => {\n      return this.props.pplTranslations.map(queryTranslation => JSON.stringify(queryTranslation.errorMessage + \": This query is not explainable.\", null, 2));\n    };\n\n    const explainContent = pplTranslationsNotEmpty() ? this.props.pplTranslations.map(queryTranslation => JSON.stringify(queryTranslation.data, null, 2)).join(\"\\n\") : showExplainErrorMessage();\n    let modal;\n\n    if (this.state.isModalVisible) {\n      modal = /*#__PURE__*/React.createElement(EuiOverlayMask, {\n        onClick: closeModal\n      }, /*#__PURE__*/React.createElement(EuiModal, {\n        onClose: closeModal,\n        style: {\n          width: 800\n        }\n      }, /*#__PURE__*/React.createElement(EuiModalHeader, null, /*#__PURE__*/React.createElement(EuiModalHeaderTitle, null, \"Explain\")), /*#__PURE__*/React.createElement(EuiModalBody, null, /*#__PURE__*/React.createElement(EuiCodeBlock, {\n        language: \"json\",\n        fontSize: \"m\",\n        isCopyable: true\n      }, explainContent)), /*#__PURE__*/React.createElement(EuiModalFooter, null, /*#__PURE__*/React.createElement(EuiButton, {\n        onClick: closeModal,\n        fill: true\n      }, \"Close\"))));\n    }\n\n    return /*#__PURE__*/React.createElement(EuiPanel, {\n      className: \"sql-console-query-editor container-panel\",\n      paddingSize: \"l\"\n    }, /*#__PURE__*/React.createElement(EuiText, {\n      className: \"sql-query-panel-header\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, \"Query editor\")), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"s\"\n    }), /*#__PURE__*/React.createElement(EuiCodeEditor, {\n      theme: \"sql_console\",\n      width: \"100%\",\n      height: \"5rem\",\n      value: this.props.pplQuery,\n      onChange: this.props.updatePPLQueries,\n      showPrintMargin: false,\n      setOptions: {\n        fontSize: \"14px\",\n        showLineNumbers: false,\n        showGutter: false\n      },\n      \"aria-label\": \"Code Editor\"\n    }), /*#__PURE__*/React.createElement(EuiSpacer, null), /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      className: \"action-container\",\n      gutterSize: \"m\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      className: \"sql-editor-buttons\",\n      grow: false,\n      onClick: () => this.props.onRun(this.props.pplQuery)\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      fill: true,\n      className: \"sql-editor-button\"\n    }, \"Run\")), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false,\n      onClick: () => {\n        this.props.updatePPLQueries(\"\");\n        this.props.onClear();\n      }\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      className: \"sql-editor-button\"\n    }, \"Clear\")), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false,\n      onClick: () => this.props.onTranslate(this.props.pplQuery)\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      className: \"sql-editor-button\",\n      onClick: showModal\n    }, \"Explain\"), modal)));\n  }\n\n}","/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport React from \"react\";\nimport { EuiButtonGroup } from \"@elastic/eui\"; // @ts-ignore\n\nconst toggleButtons = [{\n  id: 'SQL',\n  label: 'SQL'\n}, {\n  id: 'PPL',\n  label: 'PPL'\n}];\n\nclass Switch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      language: 'SQL'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(EuiButtonGroup, {\n      className: \"query-language-switch\",\n      legend: \"query-language-swtich\",\n      options: toggleButtons,\n      onChange: id => this.props.onChange(id),\n      idSelected: this.props.language,\n      buttonSize: \"m\"\n    });\n  }\n\n}\n\nexport default Switch;","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport React from \"react\"; // @ts-ignore\n\nimport { SortableProperties } from \"@elastic/eui/lib/services\"; // @ts-ignore\n\nimport { EuiPanel, EuiFlexGroup, EuiFlexItem, EuiTab, EuiTabs, EuiPopover, EuiContextMenuItem, EuiContextMenuPanel, EuiHorizontalRule, EuiSearchBar, Pager, EuiIcon, EuiText, EuiSpacer, EuiTextAlign, EuiButton, EuiButtonIcon } from \"@elastic/eui\";\nimport QueryResultsBody from \"./QueryResultsBody\";\nimport { getQueryIndex, needsScrolling, getSelectedResults } from \"../../utils/utils\";\nimport { DEFAULT_NUM_RECORDS_PER_PAGE, MESSAGE_TAB_LABEL, TAB_CONTAINER_ID } from \"../../utils/constants\";\nimport { PanelWrapper } from '../../utils/PanelWrapper';\nimport _ from 'lodash';\n\nclass QueryResults extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"sortableColumns\", void 0);\n\n    _defineProperty(this, \"sortableProperties\", void 0);\n\n    _defineProperty(this, \"sortedColumn\", void 0);\n\n    _defineProperty(this, \"tabNames\", void 0);\n\n    _defineProperty(this, \"pager\", void 0);\n\n    _defineProperty(this, \"showTabsMenu\", () => {\n      this.setState(prevState => ({\n        isPopoverOpen: !prevState.isPopoverOpen\n      }));\n    });\n\n    _defineProperty(this, \"slideTabsRight\", () => {\n      if (document.getElementById(TAB_CONTAINER_ID)) {\n        document.getElementById(TAB_CONTAINER_ID).scrollBy(50, 0);\n      }\n    });\n\n    _defineProperty(this, \"slideTabsLeft\", () => {\n      if (document.getElementById(TAB_CONTAINER_ID)) {\n        document.getElementById(TAB_CONTAINER_ID).scrollBy(-50, 0);\n      }\n    });\n\n    _defineProperty(this, \"closePopover\", () => {\n      this.setState({\n        isPopoverOpen: false\n      });\n    });\n\n    _defineProperty(this, \"onChangeItemsPerPage\", itemsPerPage => {\n      this.pager.setItemsPerPage(itemsPerPage);\n      this.setState({\n        itemsPerPage\n      });\n    });\n\n    _defineProperty(this, \"onChangePage\", pageIndex => {\n      this.pager.goToPageIndex(pageIndex);\n      this.setState({});\n    });\n\n    _defineProperty(this, \"onSort\", prop => {\n      this.sortableProperties.sortOn(prop);\n      this.sortedColumn = prop;\n      this.setState({});\n    });\n\n    this.state = {\n      isPopoverOpen: false,\n      tabsOverflow: this.props.tabsOverflow ? this.props.tabsOverflow : false,\n      itemsPerPage: DEFAULT_NUM_RECORDS_PER_PAGE\n    };\n    this.sortableColumns = [];\n    this.sortedColumn = \"\";\n    this.sortableProperties = new SortableProperties([{\n      name: \"\",\n      getValue: item => \"\",\n      isAscending: true\n    }], \"\");\n    this.tabNames = [];\n    this.pager = new Pager(0, this.state.itemsPerPage);\n  }\n\n  componentDidUpdate() {\n    const showArrow = needsScrolling(\"tabsContainer\");\n\n    if (showArrow !== this.state.tabsOverflow) {\n      this.setState({\n        tabsOverflow: showArrow\n      });\n    }\n  } // Actions for Tabs Button\n\n\n  updatePagination(totalItemsCount) {\n    this.pager.setTotalItems(totalItemsCount);\n  } // Update SORTABLE COLUMNS - All columns\n\n\n  updateSortableColumns(queryResultsSelected) {\n    if (this.sortableColumns.length === 0) {\n      queryResultsSelected.fields.map(field => {\n        this.sortableColumns.push({\n          name: field,\n          getValue: item => item[field],\n          isAscending: true\n        });\n      });\n      this.sortedColumn = this.sortableColumns.length > 0 ? this.sortableColumns[0].name : \"\";\n      this.sortableProperties = new SortableProperties(this.sortableColumns, this.sortedColumn);\n    }\n  }\n\n  renderTabs() {\n    const tabs = [{\n      id: MESSAGE_TAB_LABEL,\n      name: _.truncate(MESSAGE_TAB_LABEL, {\n        length: 17\n      }),\n      disabled: false\n    }];\n    this.tabNames = [];\n\n    if (this.props.queryResults) {\n      for (let i = 0; i < this.props.queryResults.length; i += 1) {\n        const tabName = this.props.language === \"SQL\" ? getQueryIndex(this.props.queries[i]) : \"Events\";\n        this.tabNames.push(tabName);\n\n        if (this.props.queryResults[i].fulfilled) {\n          tabs.push({\n            id: i.toString(),\n            name: tabName,\n            disabled: false\n          });\n        }\n      }\n    }\n\n    return tabs;\n  }\n\n  render() {\n    // Update PAGINATION and SORTABLE columns\n    const queryResultSelected = getSelectedResults(this.props.queryResults, this.props.selectedTabId);\n\n    if (queryResultSelected) {\n      const matchingItems = this.props.searchQuery ? EuiSearchBar.Query.execute(this.props.searchQuery, queryResultSelected.records) : queryResultSelected.records;\n      this.updatePagination(matchingItems.length);\n      this.updateSortableColumns(queryResultSelected);\n    } // Action button with list of tabs, TODO: disable tabArrowRight and tabArrowLeft when no more scrolling is possible\n\n\n    const tabArrowDown = /*#__PURE__*/React.createElement(EuiIcon, {\n      onClick: this.showTabsMenu,\n      type: \"arrowDown\"\n    });\n    const tabs = this.renderTabs();\n    const tabsItems = tabs.map((tab, index) => /*#__PURE__*/React.createElement(EuiContextMenuItem, {\n      key: \"10 rows\",\n      icon: \"empty\",\n      style: {\n        marginRight: 27\n      },\n      onClick: () => {\n        this.closePopover();\n        this.pager.goToPageIndex(0);\n        this.sortableColumns = [];\n        this.props.onSelectedTabIdChange(tab);\n      }\n    }, tab.name));\n    const tabsButtons = tabs.map((tab, index) => /*#__PURE__*/React.createElement(EuiTab, {\n      onClick: () => {\n        this.pager.goToPageIndex(0);\n        this.sortableColumns = [];\n        this.props.onSelectedTabIdChange(tab);\n      },\n      isSelected: tab.id === this.props.selectedTabId,\n      disabled: tab.disabled,\n      key: index\n    }, tab.name));\n    return /*#__PURE__*/React.createElement(EuiPanel, {\n      className: \"query-result-container\",\n      paddingSize: \"none\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: 20,\n        paddingBottom: 0\n      }\n    }, /*#__PURE__*/React.createElement(EuiFlexGroup, null, /*#__PURE__*/React.createElement(EuiFlexItem, null, /*#__PURE__*/React.createElement(EuiText, {\n      className: \"query-result-panel-header\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, \"Results\"))), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, this.props.queryResults.length > 0 && (this.props.isResultFullScreen ? /*#__PURE__*/React.createElement(EuiButtonIcon, {\n      iconType: \"cross\",\n      color: \"text\",\n      id: \"exit-fullscreen-button\",\n      onClick: () => this.props.setIsResultFullScreen(false)\n    }) : /*#__PURE__*/React.createElement(EuiButton, {\n      size: \"s\",\n      iconType: \"fullScreen\",\n      onClick: () => this.props.setIsResultFullScreen(true)\n    }, \"Full screen view\"))))), this.props.queryResults.length === 0 ?\n    /*#__PURE__*/\n    // show no results message instead of the results table when there are no results\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"xxl\"\n    }), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"xl\"\n    }), /*#__PURE__*/React.createElement(EuiText, {\n      style: {\n        color: \"#3f3f3f\"\n      }\n    }, /*#__PURE__*/React.createElement(EuiTextAlign, {\n      textAlign: \"center\"\n    }, /*#__PURE__*/React.createElement(\"h4\", null, \"No result\")), /*#__PURE__*/React.createElement(EuiTextAlign, {\n      textAlign: \"center\"\n    }, /*#__PURE__*/React.createElement(\"p\", null, \"Enter a query in the query editor above to see results.\"))), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"xxl\"\n    }), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"xl\"\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      style: {\n        padding: 5\n      }\n    }, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      className: \"tabs-container\",\n      alignItems: \"center\",\n      gutterSize: \"s\",\n      id: \"tabsContainer\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      style: {\n        marginTop: \"8px\"\n      },\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiTabs, null, tabsButtons))), this.state.tabsOverflow && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-arrow-down-container\"\n    }, /*#__PURE__*/React.createElement(EuiFlexGroup, null, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiPopover, {\n      id: \"singlePanel\",\n      button: tabArrowDown,\n      \"data-test-subj\": \"slide-down\",\n      isOpen: this.state.isPopoverOpen,\n      closePopover: this.closePopover,\n      panelPaddingSize: \"none\",\n      anchorPosition: \"downLeft\"\n    }, /*#__PURE__*/React.createElement(EuiContextMenuPanel, {\n      items: tabsItems\n    })))))), /*#__PURE__*/React.createElement(EuiHorizontalRule, {\n      margin: \"none\"\n    }), /*#__PURE__*/React.createElement(PanelWrapper, {\n      shouldWrap: this.props.language === 'SQL' && this.props.selectedTabName !== MESSAGE_TAB_LABEL\n    }, /*#__PURE__*/React.createElement(QueryResultsBody, {\n      language: this.props.language,\n      queries: this.props.queries,\n      selectedTabId: this.props.selectedTabId,\n      selectedTabName: this.props.selectedTabName,\n      tabNames: this.tabNames,\n      queryResultSelected: queryResultSelected,\n      queryResultsJSON: this.props.queryResultsJSON,\n      queryResultsJDBC: this.props.queryResultsJDBC,\n      queryResultsCSV: this.props.queryResultsCSV,\n      queryResultsTEXT: this.props.queryResultsTEXT,\n      messages: this.props.messages,\n      searchQuery: this.props.searchQuery,\n      onQueryChange: this.props.onQueryChange,\n      pager: this.pager,\n      itemsPerPage: this.state.itemsPerPage,\n      firstItemIndex: this.pager.getFirstItemIndex(),\n      lastItemIndex: this.pager.getLastItemIndex(),\n      onChangeItemsPerPage: this.onChangeItemsPerPage,\n      onChangePage: this.onChangePage,\n      onSort: this.onSort,\n      sortedColumn: this.sortedColumn,\n      sortableProperties: this.sortableProperties,\n      itemIdToExpandedRowMap: this.props.itemIdToExpandedRowMap,\n      updateExpandedMap: this.props.updateExpandedMap,\n      getJson: this.props.getJson,\n      getJdbc: this.props.getJdbc,\n      getCsv: this.props.getCsv,\n      getText: this.props.getText\n    }))));\n  }\n\n}\n\nexport default QueryResults;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport React, { Fragment } from \"react\"; // @ts-ignore\n\n// @ts-ignore\nimport { EuiCodeEditor, EuiModal, EuiModalBody, EuiModalFooter, EuiModalHeader, EuiModalHeaderTitle, EuiOverlayMask, EuiSearchBar, EuiSideNav } from \"@elastic/eui\";\nimport { EuiButton, EuiButtonIcon, EuiContextMenu, EuiFlexGroup, EuiFlexItem, EuiLink, EuiPopover, EuiTable, EuiTableBody, EuiTableHeader, EuiTableHeaderCell, EuiTablePagination, EuiTableRow, EuiTableRowCell, EuiText } from \"@elastic/eui\";\nimport { findRootNode, getMessageString, getRowTree, isEmpty, onDownloadFile, scrollToNode } from \"../../utils/utils\";\nimport \"../../ace-themes/sql_console\";\nimport { COLUMN_WIDTH, PAGE_OPTIONS, SMALL_COLUMN_WIDTH } from \"../../utils/constants\";\n\nconst DoubleScrollbar = require('react-double-scrollbar');\n\nclass QueryResultsBody extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"items\", void 0);\n\n    _defineProperty(this, \"columns\", void 0);\n\n    _defineProperty(this, \"panels\", void 0);\n\n    _defineProperty(this, \"expandedRowColSpan\", void 0);\n\n    _defineProperty(this, \"getModal\", errorMessage => {\n      const closeModal = () => this.setIsModalVisible(false);\n\n      let modal = /*#__PURE__*/React.createElement(EuiOverlayMask, {\n        onClick: closeModal\n      }, /*#__PURE__*/React.createElement(EuiModal, {\n        onClose: closeModal\n      }, /*#__PURE__*/React.createElement(EuiModalHeader, null, /*#__PURE__*/React.createElement(EuiModalHeaderTitle, null, \"Error\")), /*#__PURE__*/React.createElement(EuiModalBody, null, /*#__PURE__*/React.createElement(EuiText, null, errorMessage)), /*#__PURE__*/React.createElement(EuiModalFooter, null, /*#__PURE__*/React.createElement(EuiButton, {\n        onClick: closeModal,\n        fill: true\n      }, \"Close\"))));\n      return modal;\n    });\n\n    _defineProperty(this, \"onDownloadJDBC\", () => {\n      if (!this.props.queryResultsJDBC) {\n        this.props.getJdbc(this.props.queries);\n      }\n\n      setTimeout(() => {\n        const jsonObject = JSON.parse(this.props.queryResultsJDBC);\n        const data = JSON.stringify(jsonObject, undefined, 4);\n        onDownloadFile(data, \"json\", this.props.selectedTabName + \".json\");\n      }, 2000);\n    });\n\n    _defineProperty(this, \"onDownloadCSV\", () => {\n      if (this.props.language == 'PPL') {\n        this.setState({\n          downloadErrorModal: this.getModal(\"PPL result in CSV format is not supported, please select JDBC format.\")\n        });\n        this.setIsModalVisible(true);\n        return;\n      }\n\n      if (!this.props.queryResultsCSV) {\n        this.props.getCsv(this.props.queries);\n      }\n\n      setTimeout(() => {\n        const data = this.props.queryResultsCSV;\n        onDownloadFile(data, \"csv\", this.props.selectedTabName + \".csv\");\n      }, 2000);\n    });\n\n    _defineProperty(this, \"onDownloadText\", () => {\n      if (this.props.language == 'PPL') {\n        this.setState({\n          downloadErrorModal: this.getModal(\"PPL result in Text format is not supported, please select JDBC format.\")\n        });\n        this.setIsModalVisible(true);\n        return;\n      }\n\n      if (!this.props.queryResultsTEXT) {\n        this.props.getText(this.props.queries);\n      }\n\n      setTimeout(() => {\n        const data = this.props.queryResultsTEXT;\n        onDownloadFile(data, \"plain\", this.props.selectedTabName + \".txt\");\n      }, 2000);\n    });\n\n    _defineProperty(this, \"onDownloadButtonClick\", () => {\n      this.setState(prevState => ({\n        isDownloadPopoverOpen: !prevState.isDownloadPopoverOpen\n      }));\n    });\n\n    _defineProperty(this, \"closeDownloadPopover\", () => {\n      this.setState({\n        isDownloadPopoverOpen: false\n      });\n    });\n\n    _defineProperty(this, \"toggleNodeData\", (node, expandedRowMap) => {\n      let newItemIdToExpandedRowMap = expandedRowMap;\n      const rootNode = findRootNode(node, expandedRowMap);\n\n      if (expandedRowMap[node.nodeId] && expandedRowMap[node.nodeId].expandedRow) {\n        delete newItemIdToExpandedRowMap[node.nodeId].expandedRow;\n      } else if (node.children && node.children.length > 0) {\n        newItemIdToExpandedRowMap = this.updateExpandedRow(node, expandedRowMap);\n      }\n\n      if (rootNode !== node) {\n        newItemIdToExpandedRowMap = this.updateExpandedRow(rootNode, expandedRowMap);\n      }\n\n      this.props.updateExpandedMap(newItemIdToExpandedRowMap);\n    });\n\n    _defineProperty(this, \"createItem\", (expandedRowMap, node, name, items = {}) => {\n      const nodeId = node.nodeId;\n      let isSelected = false;\n\n      if (!isEmpty(node.parent)) {\n        isSelected = expandedRowMap[node.parent.nodeId] && expandedRowMap[node.parent.nodeId].selectedNodes && expandedRowMap[node.parent.nodeId].selectedNodes.hasOwnProperty(nodeId);\n      }\n\n      return { ...items,\n        id: nodeId,\n        name,\n        isSelected: isSelected,\n        onClick: () => console.log('open side nav')\n      };\n    });\n\n    _defineProperty(this, \"renderNodeData\", (node, expandedRowMap) => {\n      // let dataRow: DataRow = {};\n      let items = [];\n      let columns = [];\n      let records = [];\n      const data = node.data;\n\n      if (Array.isArray(data)) {\n        items = data;\n        columns = typeof items[0] === \"object\" ? Object.keys(items[0]) : [];\n      } else if (typeof data === \"object\") {\n        records.push(data);\n        items = records;\n        columns = this.addExpandingIconColumn(Object.keys(data));\n      }\n\n      let dataRow = {\n        rowId: 0,\n        data: items\n      };\n      return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(EuiTable, {\n        className: \"sideNav-table\"\n      }, /*#__PURE__*/React.createElement(EuiTableHeader, {\n        className: \"table-header\"\n      }, this.renderHeaderCellsWithNoSorting(columns)), /*#__PURE__*/React.createElement(EuiTableBody, null, this.renderRow(dataRow, columns, node.nodeId.toString(), expandedRowMap))));\n    });\n\n    this.state = {\n      itemIdToSelectedMap: {},\n      itemIdToOpenActionsPopoverMap: {},\n      incremental: true,\n      filters: false,\n      itemIdToExpandedRowMap: this.props.itemIdToExpandedRowMap,\n      searchQuery: this.props.searchQuery,\n      selectedItemMap: {},\n      selectedItemName: \"\",\n      selectedItemData: {},\n      navView: false,\n      isPopoverOpen: false,\n      isDownloadPopoverOpen: false,\n      isModalVisible: false,\n      downloadErrorModal: {}\n    };\n    this.expandedRowColSpan = 0;\n    this.items = [];\n    this.columns = [];\n    this.panels = [{\n      id: 0,\n      items: [{\n        name: \"Download JSON\",\n        onClick: () => {\n          this.onDownloadJSON();\n        }\n      }, {\n        name: \"Download JDBC\",\n        onClick: () => {\n          this.onDownloadJDBC();\n        }\n      }, {\n        name: \"Download CSV\",\n        onClick: () => {\n          this.onDownloadCSV();\n        }\n      }, {\n        name: \"Download Text\",\n        onClick: () => {\n          this.onDownloadText();\n        }\n      }]\n    }];\n  }\n\n  setIsModalVisible(visible) {\n    this.setState({\n      isModalVisible: visible\n    });\n  }\n\n  // Actions for Download files\n  onDownloadJSON() {\n    if (this.props.language == 'PPL') {\n      this.setState({\n        downloadErrorModal: this.getModal(\"PPL result in JSON format is not supported, please select JDBC format.\")\n      });\n      this.setIsModalVisible(true);\n      return;\n    }\n\n    if (!this.props.queryResultsJSON) {\n      this.props.getJson(this.props.queries);\n    }\n\n    setTimeout(() => {\n      const jsonObject = JSON.parse(this.props.queryResultsJSON);\n      const data = JSON.stringify(jsonObject, undefined, 4);\n      onDownloadFile(data, \"json\", this.props.selectedTabName + \".json\");\n    }, 2000);\n  }\n\n  // It sorts and filters table values\n  getItems(records) {\n    const matchingItems = this.props.searchQuery ? EuiSearchBar.Query.execute(this.props.searchQuery, records) : records;\n    return this.props.sortableProperties.sortItems(matchingItems);\n  } // It processes field values and determines whether it should link to an expanded row or an expanded array\n\n\n  getFieldValue(fieldValue, field) {\n    let hasExpandingRow = false;\n    let hasExpandingArray = false;\n    let value = \"\";\n    let link = \"\";\n\n    if (fieldValue === null) {\n      return {\n        hasExpandingRow: hasExpandingRow,\n        value: \"\",\n        hasExpandingArray,\n        link\n      };\n    } // Not an object or array\n\n\n    if (typeof fieldValue !== \"object\") {\n      return {\n        hasExpandingRow: hasExpandingRow,\n        value: fieldValue,\n        hasExpandingArray,\n        link\n      };\n    } // Array of strings or objects\n\n\n    if (Array.isArray(fieldValue)) {\n      if (typeof fieldValue[0] !== \"object\") {\n        hasExpandingArray = true;\n        link = field.concat(\": [\", fieldValue.length.toString(), \"]\");\n      } else {\n        hasExpandingRow = true;\n        link = field.concat(\": {\", fieldValue.length.toString(), \"}\");\n      }\n    } // Single object\n    else {\n        hasExpandingRow = true;\n        link = field.concat(\": {1}\");\n      }\n\n    return {\n      hasExpandingRow: hasExpandingRow,\n      hasExpandingArray: hasExpandingArray,\n      value: value,\n      link: link\n    };\n  }\n\n  addExpandingNodeIcon(node, expandedRowMap) {\n    return /*#__PURE__*/React.createElement(EuiButtonIcon, {\n      style: {\n        marginLeft: -4\n      },\n      onClick: () => this.toggleNodeData(node, expandedRowMap),\n      \"aria-label\": expandedRowMap[node.nodeId] && expandedRowMap[node.nodeId].expandedRow ? \"Collapse\" : \"Expand\",\n      iconType: expandedRowMap[node.nodeId] && expandedRowMap[node.nodeId].expandedRow ? \"minusInCircle\" : \"plusInCircle\"\n    });\n  }\n\n  addExpandingSideNavIcon(node, expandedRowMap) {\n    if (!node.parent) {\n      return;\n    }\n\n    return /*#__PURE__*/React.createElement(EuiButtonIcon, {\n      onClick: () => this.updateExpandedRowMap(node, expandedRowMap),\n      \"aria-label\": expandedRowMap[node.parent.nodeId] && expandedRowMap[node.parent.nodeId].selectedNodes && expandedRowMap[node.parent.nodeId].selectedNodes.hasOwnProperty(node.nodeId) ? \"Collapse\" : \"Expand\",\n      iconType: expandedRowMap[node.parent.nodeId] && expandedRowMap[node.parent.nodeId].selectedNodes && expandedRowMap[node.parent.nodeId].selectedNodes.hasOwnProperty(node.nodeId) ? \"minusInCircle\" : \"plusInCircle\"\n    });\n  }\n\n  addExpandingIconColumn(columns) {\n    const expandIconColumn = [{\n      id: \"expandIcon\",\n      label: \"\",\n      isSortable: false,\n      width: \"30px\"\n    }];\n    columns = expandIconColumn.concat(columns);\n    return columns;\n  }\n\n  updateSelectedNodes(parentNode, selectedNode, expandedRowMap, keepOpen = false) {\n    if (!parentNode) {\n      return expandedRowMap;\n    }\n\n    const parentNodeId = parentNode.nodeId;\n\n    if (expandedRowMap[parentNodeId] && expandedRowMap[parentNodeId].selectedNodes && expandedRowMap[parentNodeId].selectedNodes.hasOwnProperty(selectedNode.nodeId) && !keepOpen) {\n      delete expandedRowMap[parentNodeId].selectedNodes[selectedNode.nodeId];\n    } else {\n      if (!expandedRowMap[parentNodeId].selectedNodes) {\n        expandedRowMap[parentNodeId].selectedNodes = {};\n      }\n\n      expandedRowMap[parentNodeId].selectedNodes[selectedNode.nodeId] = selectedNode.data;\n    }\n\n    return expandedRowMap;\n  }\n\n  updateExpandedRow(node, expandedRowMap) {\n    let newItemIdToExpandedRowMap = expandedRowMap;\n\n    if (expandedRowMap[node.nodeId]) {\n      newItemIdToExpandedRowMap[node.nodeId].expandedRow = /*#__PURE__*/React.createElement(\"div\", {\n        id: node.nodeId,\n        style: {\n          padding: \"0 0 20px 19px\"\n        }\n      }, this.renderNav(node, node.name, expandedRowMap));\n    }\n\n    return newItemIdToExpandedRowMap;\n  }\n\n  updateExpandedRowMap(node, expandedRowMap, keepOpen = false) {\n    if (!node) {\n      return expandedRowMap;\n    }\n\n    let newItemIdToExpandedRowMap = this.updateSelectedNodes(node.parent, node, expandedRowMap, keepOpen);\n    const rootNode = findRootNode(node, expandedRowMap);\n\n    if (expandedRowMap[rootNode.nodeId]) {\n      newItemIdToExpandedRowMap = this.updateExpandedRow(node.parent, newItemIdToExpandedRowMap);\n      newItemIdToExpandedRowMap = this.updateExpandedRow(rootNode, newItemIdToExpandedRowMap);\n    }\n\n    this.props.updateExpandedMap(newItemIdToExpandedRowMap);\n  }\n\n  getChildrenItems(nodes, parentNode, expandedRowMap) {\n    const itemList = [];\n\n    if (nodes.length === 0 && parentNode.data) {\n      const renderedData = this.renderNodeData(parentNode, expandedRowMap);\n      itemList.push(this.createItem(expandedRowMap, parentNode, renderedData, {\n        items: []\n      }));\n    }\n\n    for (let i = 0; i < nodes.length; i++) {\n      itemList.push(this.createItem(expandedRowMap, nodes[i], nodes[i].name, {\n        icon: this.addExpandingSideNavIcon(nodes[i], expandedRowMap),\n        items: this.getChildrenItems(nodes[i].children, nodes[i], expandedRowMap)\n      }));\n    }\n\n    return itemList;\n  }\n\n  /************* Render Functions *************/\n  renderMessagesTab() {\n    return /*#__PURE__*/React.createElement(EuiCodeEditor, {\n      className: this.props.messages && this.props.messages.length > 0 ? this.props.messages[0].className : \"successful-message\",\n      mode: \"text\",\n      theme: \"sql_console\",\n      width: \"100%\",\n      value: getMessageString(this.props.messages, this.props.tabNames),\n      showPrintMargin: false,\n      readOnly: true,\n      setOptions: {\n        fontSize: \"14px\",\n        readOnly: true,\n        highlightActiveLine: false,\n        highlightGutterLine: false\n      },\n      \"aria-label\": \"Code Editor\"\n    });\n  }\n\n  renderHeaderCells(columns) {\n    return columns.map(field => {\n      const label = field.id === \"expandIcon\" ? field.label : field;\n      const colwidth = field.id === \"expandIcon\" ? SMALL_COLUMN_WIDTH : COLUMN_WIDTH;\n      return /*#__PURE__*/React.createElement(EuiTableHeaderCell, {\n        key: label,\n        width: colwidth,\n        onSort: this.props.onSort.bind(this, field),\n        isSorted: this.props.sortedColumn === field,\n        isSortAscending: this.props.sortableProperties.isAscendingByName(field)\n      }, label);\n    });\n  } // Inner tables sorting is not enabled\n\n\n  renderHeaderCellsWithNoSorting(columns) {\n    return columns.map(field => {\n      const label = field.id === \"expandIcon\" ? field.label : field;\n      const colwidth = field.id === \"expandIcon\" ? field.width : COLUMN_WIDTH;\n      return /*#__PURE__*/React.createElement(EuiTableHeaderCell, {\n        key: label,\n        width: colwidth\n      }, label);\n    });\n  }\n\n  renderRow(item, columns, rowId, expandedRowMap) {\n    let rows = [];\n    const data = item.data; // If the data is an array or an object we add it to the expandedRowMap\n\n    if (data && (typeof data === \"object\" && !isEmpty(data) || Array.isArray(data) && data.length > 0)) {\n      let rowItems = [];\n\n      if (Array.isArray(data)) {\n        rowItems = data;\n      } else {\n        rowItems.push(data);\n      }\n\n      for (let i = 0; i < rowItems.length; i++) {\n        let rowItem = rowItems[i];\n        let tableCells = [];\n        const tree = getRowTree(rowId, rowItem, expandedRowMap); // Add nodes to expandedRowMap\n\n        if (!expandedRowMap[rowId] || !expandedRowMap[rowId].nodes) {\n          expandedRowMap[rowId] = {\n            nodes: tree\n          };\n        }\n\n        const expandingNode = tree && tree._root.children.length > 0 ? this.addExpandingNodeIcon(tree._root, expandedRowMap) : \"\";\n\n        if (columns.length > 0) {\n          columns.map(field => {\n            // Table cell\n            if (field.id !== \"expandIcon\") {\n              const fieldObj = this.getFieldValue(rowItem[field], field);\n              let fieldValue; // If field is expandable\n\n              if (fieldObj.hasExpandingRow || fieldObj.hasExpandingArray) {\n                const fieldNode = expandedRowMap[tree._root.nodeId].nodes._root.children.find(node => node.name === field);\n\n                fieldValue = /*#__PURE__*/React.createElement(\"span\", null, \" \", fieldObj.value, /*#__PURE__*/React.createElement(EuiLink, {\n                  color: \"primary\",\n                  onClick: () => {\n                    this.updateExpandedRowMap(fieldNode, expandedRowMap, true);\n                    scrollToNode(tree._root.nodeId);\n                  }\n                }, fieldObj.link));\n              } else {\n                fieldValue = fieldObj.value;\n              }\n\n              tableCells.push( /*#__PURE__*/React.createElement(EuiTableRowCell, {\n                key: field,\n                truncateText: false,\n                textOnly: true\n              }, fieldValue));\n            } // Expanding icon cell\n            else {\n                tableCells.push( /*#__PURE__*/React.createElement(EuiTableRowCell, {\n                  id: tree._root.nodeId\n                }, expandingNode));\n              }\n          });\n        } else {\n          const fieldObj = this.getFieldValue(rowItem, \"\");\n          tableCells.push( /*#__PURE__*/React.createElement(EuiTableRowCell, {\n            truncateText: false,\n            textOnly: true\n          }, fieldObj.value));\n        }\n\n        const tableRow = /*#__PURE__*/React.createElement(EuiTableRow, {\n          key: rowId,\n          \"data-test-subj\": 'tableRow'\n        }, tableCells, \" \");\n        let row = /*#__PURE__*/React.createElement(Fragment, null, tableRow);\n\n        if (expandedRowMap[rowId] && expandedRowMap[rowId].expandedRow) {\n          const tableRow = /*#__PURE__*/React.createElement(EuiTableRow, {\n            className: \"expanded-row\",\n            key: rowId\n          }, tableCells, \" \");\n          const expandedRow = /*#__PURE__*/React.createElement(EuiTableRow, null, expandedRowMap[rowId].expandedRow);\n          row = /*#__PURE__*/React.createElement(Fragment, null, tableRow, expandedRow);\n        }\n\n        rows.push(row);\n      }\n    }\n\n    return rows;\n  }\n\n  renderRows(items, columns, expandedRowMap) {\n    let rows = [];\n\n    if (items) {\n      for (let itemIndex = this.props.firstItemIndex; itemIndex <= this.props.lastItemIndex; itemIndex++) {\n        const item = items[itemIndex];\n        const rowId = item.rowId;\n\n        if (item) {\n          const rowsForItem = this.renderRow(item, columns, rowId.toString(10), expandedRowMap);\n          rows.push(rowsForItem);\n        }\n      }\n    }\n\n    return rows;\n  }\n\n  renderSearchBar() {\n    const search = {\n      box: {\n        incremental: this.state.incremental,\n        placeholder: \"Search keyword\",\n        schema: true\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-bar\"\n    }, /*#__PURE__*/React.createElement(EuiSearchBar, _extends({\n      onChange: this.props.onQueryChange,\n      query: this.props.searchQuery\n    }, search)));\n  }\n\n  renderNav(node, table_name, expandedRowMap) {\n    const sideNav = [{\n      items: this.getChildrenItems(node.children, node, expandedRowMap),\n      id: node.nodeId,\n      name: node.name,\n      isSelected: false,\n      onClick: () => console.log('open side nav')\n    }];\n    return /*#__PURE__*/React.createElement(EuiSideNav, {\n      mobileTitle: \"Navigate within $APP_NAME\",\n      items: sideNav,\n      className: \"sideNavItem__items\",\n      style: {\n        width: \"300px\",\n        padding: \"0 0 20px 9px\"\n      }\n    });\n  }\n\n  render() {\n    // Action button with list of downloads\n    const downloadsButton = /*#__PURE__*/React.createElement(EuiButton, {\n      iconType: \"arrowDown\",\n      iconSide: \"right\",\n      size: \"s\",\n      onClick: this.onDownloadButtonClick\n    }, \"Download\");\n    let modal;\n\n    if (this.state.isModalVisible) {\n      modal = this.state.downloadErrorModal;\n    }\n\n    if ( // this.props.selectedTabId === MESSAGE_TAB_LABEL ||\n    this.props.queryResultSelected == undefined) {\n      return this.renderMessagesTab();\n    } else {\n      if (this.props.queryResultSelected) {\n        this.items = this.getItems(this.props.queryResultSelected.records); //Adding an extra empty column for the expanding icon\n\n        this.columns = this.addExpandingIconColumn(this.props.queryResultSelected.fields);\n        this.expandedRowColSpan = this.columns.length;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", null, this.props.language === 'SQL' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n        alignItems: \"flexStart\",\n        style: {\n          padding: 20,\n          paddingBottom: 0\n        }\n      }, /*#__PURE__*/React.createElement(EuiFlexItem, null, /*#__PURE__*/React.createElement(EuiText, {\n        className: \"table-name\"\n      }, /*#__PURE__*/React.createElement(\"h4\", null, this.props.selectedTabName, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"table-item-count\"\n      }, ` (${this.items.length})`))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"search-panel\"\n      }, this.renderSearchBar())), /*#__PURE__*/React.createElement(EuiFlexItem, {\n        grow: false\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"download-container\"\n      }, /*#__PURE__*/React.createElement(EuiPopover, {\n        className: \"download-button-container\",\n        id: \"singlePanel\",\n        button: downloadsButton,\n        isOpen: this.state.isDownloadPopoverOpen,\n        closePopover: this.closeDownloadPopover,\n        panelPaddingSize: \"none\",\n        anchorPosition: \"downLeft\"\n      }, /*#__PURE__*/React.createElement(EuiContextMenu, {\n        initialPanelId: 0,\n        panels: this.panels\n      }))))), modal), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sql-console-results-container\"\n      }, /*#__PURE__*/React.createElement(DoubleScrollbar, null, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n        gutterSize: \"none\"\n      }, /*#__PURE__*/React.createElement(EuiFlexItem, null, /*#__PURE__*/React.createElement(EuiTable, null, /*#__PURE__*/React.createElement(EuiTableHeader, {\n        className: \"table-header\"\n      }, this.renderHeaderCells(this.columns)), /*#__PURE__*/React.createElement(EuiTableBody, null, this.renderRows(this.items, this.columns, this.props.itemIdToExpandedRowMap))))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pagination-container\"\n      }, /*#__PURE__*/React.createElement(EuiTablePagination, {\n        activePage: this.props.pager.getCurrentPageIndex(),\n        itemsPerPage: this.props.itemsPerPage,\n        itemsPerPageOptions: PAGE_OPTIONS,\n        pageCount: this.props.pager.getTotalPages(),\n        onChangeItemsPerPage: this.props.onChangeItemsPerPage,\n        onChangePage: this.props.onChangePage\n      })));\n    }\n  }\n\n}\n\nexport default QueryResultsBody;","/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport React from \"react\";\nimport { EuiPanel, EuiButton, EuiFlexGroup, EuiFlexItem, EuiOverlayMask, EuiModal, EuiModalHeader, EuiModalHeaderTitle, EuiModalBody, EuiModalFooter, EuiCodeBlock, EuiText, EuiCodeEditor, EuiSpacer } from \"@elastic/eui\";\nimport \"brace/mode/sql\";\nimport \"../../ace-themes/sql_console\";\nimport 'brace/ext/language_tools';\nexport class SQLPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sqlQuery: this.props.sqlQuery,\n      translation: \"\",\n      isModalVisible: false\n    };\n  }\n\n  setIsModalVisible(visible) {\n    this.setState({\n      isModalVisible: visible\n    });\n  }\n\n  render() {\n    const closeModal = () => this.setIsModalVisible(false);\n\n    const showModal = () => this.setIsModalVisible(true);\n\n    const sqlTranslationsNotEmpty = () => {\n      if (this.props.sqlTranslations.length > 0) {\n        return this.props.sqlTranslations[0].fulfilled;\n      }\n\n      return false;\n    };\n\n    const showExplainErrorMessage = () => {\n      return this.props.sqlTranslations.map(queryTranslation => JSON.stringify(queryTranslation.errorMessage + \": This query is not explainable.\", null, 2));\n    };\n\n    const explainContent = sqlTranslationsNotEmpty() ? this.props.sqlTranslations.map(queryTranslation => JSON.stringify(queryTranslation.data, null, 2)).join(\"\\n\") : showExplainErrorMessage();\n    let modal;\n\n    if (this.state.isModalVisible) {\n      modal = /*#__PURE__*/React.createElement(EuiOverlayMask, {\n        onClick: closeModal\n      }, /*#__PURE__*/React.createElement(EuiModal, {\n        onClose: closeModal,\n        style: {\n          width: 800\n        }\n      }, /*#__PURE__*/React.createElement(EuiModalHeader, null, /*#__PURE__*/React.createElement(EuiModalHeaderTitle, null, \"Explain\")), /*#__PURE__*/React.createElement(EuiModalBody, null, /*#__PURE__*/React.createElement(EuiCodeBlock, {\n        language: \"json\",\n        fontSize: \"m\",\n        isCopyable: true\n      }, explainContent)), /*#__PURE__*/React.createElement(EuiModalFooter, null, /*#__PURE__*/React.createElement(EuiButton, {\n        onClick: closeModal,\n        fill: true\n      }, \"Close\"))));\n    }\n\n    return /*#__PURE__*/React.createElement(EuiPanel, {\n      className: \"sql-console-query-editor container-panel\",\n      paddingSize: \"l\"\n    }, /*#__PURE__*/React.createElement(EuiText, {\n      className: \"sql-query-panel-header\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, \"Query editor\")), /*#__PURE__*/React.createElement(EuiSpacer, {\n      size: \"s\"\n    }), /*#__PURE__*/React.createElement(EuiCodeEditor, {\n      mode: \"sql\",\n      theme: \"sql_console\",\n      width: \"100%\",\n      height: \"7rem\",\n      value: this.props.sqlQuery,\n      onChange: this.props.updateSQLQueries,\n      showPrintMargin: false,\n      setOptions: {\n        fontSize: \"14px\",\n        enableBasicAutocompletion: true,\n        enableLiveAutocompletion: true\n      },\n      \"aria-label\": \"Code Editor\"\n    }), /*#__PURE__*/React.createElement(EuiSpacer, null), /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      className: \"action-container\",\n      gutterSize: \"m\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false,\n      onClick: () => this.props.onRun(this.props.sqlQuery)\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      fill: true,\n      className: \"sql-editor-button\"\n    }, \"Run\")), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false,\n      onClick: () => {\n        this.props.updateSQLQueries(\"\");\n        this.props.onClear();\n      }\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      className: \"sql-editor-button\"\n    }, \"Clear\")), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false,\n      onClick: () => this.props.onTranslate(this.props.sqlQuery)\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      className: \"sql-editor-button\",\n      onClick: showModal\n    }, \"Explain\"), modal)));\n  }\n\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport React from 'react';\nimport { I18nProvider } from '@kbn/i18n/react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { EuiPage, EuiPageBody } from '@elastic/eui';\nimport { Main } from './Main';\n\nconst onChange = () => {};\n\nexport const WorkbenchApp = ({\n  basename,\n  notifications,\n  http,\n  navigation\n}) => {\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: '/' + basename\n  }, /*#__PURE__*/React.createElement(I18nProvider, null, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(EuiPage, null, /*#__PURE__*/React.createElement(EuiPageBody, null, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    render: props => /*#__PURE__*/React.createElement(Main, _extends({\n      httpClient: http\n    }, props))\n  }))))));\n};","/*\n * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\nimport React from 'react';\nimport { EuiPanel } from '@elastic/eui';\nexport function PanelWrapper({\n  shouldWrap,\n  children\n}) {\n  return shouldWrap ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: \"#f5f7fa\",\n      padding: 25\n    }\n  }, /*#__PURE__*/React.createElement(EuiPanel, {\n    paddingSize: \"none\"\n  }, children)) : /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}","/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\n// Table constants\nexport const DEFAULT_NUM_RECORDS_PER_PAGE = 10;\nexport const PAGE_OPTIONS = [10, 20, 50, 100];\nexport const COLUMN_WIDTH = '155px';\nexport const MEDIUM_COLUMN_WIDTH = '80px';\nexport const SMALL_COLUMN_WIDTH = '27px'; // Tabs constants\n\nexport const TAB_CONTAINER_ID = 'tabsContainer';\nexport const MESSAGE_TAB_LABEL = 'Output';","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n *   Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\").\n *   You may not use this file except in compliance with the License.\n *   A copy of the License is located at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   or in the \"license\" file accompanying this file. This file is distributed\n *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *   express or implied. See the License for the specific language governing\n *   permissions and limitations under the License.\n */\nimport { MESSAGE_TAB_LABEL } from \"./constants\"; // It returns an array of queries\n\nexport const getQueries = queriesString => {\n  if (queriesString == '') {\n    return [];\n  }\n\n  return queriesString.split(';').map(query => query.trim()).filter(query => query != '');\n}; // It retrieves the index from the query. The index is used to label the query results tab\n\nexport function getQueryIndex(query) {\n  if (query) {\n    const queryFrom = query.toLowerCase().split(\"from\");\n\n    if (queryFrom.length > 1) {\n      return queryFrom[1].split(\" \")[1];\n    }\n  }\n\n  return query;\n} // Tabs utils\n\nexport function getDefaultTabId(queryResults) {\n  return queryResults && queryResults.length > 0 && queryResults[0].fulfilled ? \"0\" : MESSAGE_TAB_LABEL;\n}\nexport function getDefaultTabLabel(queryResults, queryString) {\n  return queryResults && queryResults.length > 0 && queryResults[0].fulfilled ? getQueryIndex(queryString) : MESSAGE_TAB_LABEL;\n} // It returns the results for the selected tab\n\nexport function getSelectedResults(results, selectedTabId) {\n  const selectedIndex = parseInt(selectedTabId);\n\n  if (!Number.isNaN(selectedIndex) && results) {\n    const selectedResult = results[selectedIndex];\n    return selectedResult && selectedResult.fulfilled ? selectedResult.data : undefined;\n  }\n\n  return undefined;\n}\nexport function isEmpty(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function capitalizeFirstLetter(name) {\n  return name && name.length > 0 ? name.charAt(0).toUpperCase() + name.slice(1) : name;\n}\nexport function getMessageString(messages, tabNames) {\n  return messages && messages.length > 0 && tabNames && tabNames.length > 0 ? messages.reduce((finalMessage, message, currentIndex) => finalMessage.concat(capitalizeFirstLetter(tabNames[currentIndex]), ': ', messages[currentIndex].text, '\\n\\n'), '') : '';\n}\nexport function scrollToNode(nodeId) {\n  const element = document.getElementById(nodeId);\n\n  if (element) {\n    element.scrollIntoView();\n  }\n} // Download functions\n\nexport function onDownloadFile(data, fileFormat, fileName) {\n  const encodedUri = encodeURI(data);\n  const content = 'data:text/' + fileFormat + ';charset=utf-8,' + encodedUri;\n  const link = document.createElement(\"a\");\n  link.setAttribute('href', content);\n  link.setAttribute('download', fileName);\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\nexport class Tree {\n  constructor(data, rootId) {\n    _defineProperty(this, \"_root\", void 0);\n\n    this._root = new Node(data, rootId, '', this._root);\n  }\n\n}\nexport class Node {\n  constructor(data, parentId, name = '', parent) {\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"children\", void 0);\n\n    _defineProperty(this, \"parent\", void 0);\n\n    _defineProperty(this, \"nodeId\", void 0);\n\n    this.data = data;\n    this.name = name;\n    this.children = [];\n    this.parent = parent;\n    this.nodeId = name === '' ? parentId : parentId + '_' + name;\n  }\n\n} // It creates a tree of nested objects or arrays for the row, where rootId is the rowId and item is the field value\n\nexport function createRowTree(item, rootId) {\n  const tree = new Tree(item, rootId);\n  const root = tree._root;\n\n  if (typeof item === 'object') {\n    for (let j = 0; j < Object.keys(item).length; j++) {\n      const itemKey = Object.keys(item)[j];\n      let data = item[itemKey]; // If value of field is an array or an object it gets added to the tree\n\n      if (data !== null && (Array.isArray(data) || typeof data === 'object')) {\n        const firstNode = new Node(data, rootId, itemKey, root);\n        root.children.push(firstNode);\n      }\n    }\n  }\n\n  return tree;\n} // It returns the tree for the given nodeId if it exists or create a new one otherwise\n\nexport function getRowTree(nodeId, item, expandedRowMap) {\n  return expandedRowMap[nodeId] && expandedRowMap[nodeId].nodes ? expandedRowMap[nodeId].nodes : createRowTree(item, nodeId);\n}\nexport function findRootNode(node, expandedRowMap) {\n  const rootNodeId = node.nodeId.split('_')[0];\n  return expandedRowMap[rootNodeId].nodes._root;\n}\n/********* TABS Functions *********/\n//It checks if an element needs a scrolling\n\nexport function needsScrolling(elementId) {\n  const element = document.getElementById(elementId);\n\n  if (element === null) {\n    return false;\n  }\n\n  return element.scrollWidth > element.offsetWidth;\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACblkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9SA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9pxHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtsourceRoot":""}